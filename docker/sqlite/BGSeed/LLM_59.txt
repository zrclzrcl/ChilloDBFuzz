CREATE TABLE users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username VARCHAR(255) NOT NULL UNIQUE,
    email VARCHAR(255),
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE posts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    title VARCHAR(255) NOT NULL,
    content TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE comments (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    post_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    content TEXT NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE VIEW user_post_counts AS
SELECT
    u.id AS user_id,
    u.username,
    COUNT(p.id) AS post_count
FROM
    users u
LEFT JOIN
    posts p ON u.id = p.user_id
GROUP BY
    u.id, u.username;


CREATE TRIGGER prevent_duplicate_usernames
BEFORE INSERT ON users
BEGIN
    SELECT CASE
        WHEN (SELECT COUNT(*) FROM users WHERE username = NEW.username) > 0
        THEN RAISE(ABORT, 'Duplicate username')
    END;
END;

INSERT INTO users (username, email) VALUES ('john_doe', 'john.doe@example.com');
INSERT INTO users (username, email) VALUES ('jane_smith', 'jane.smith@example.com');
INSERT INTO users (username) VALUES ('peter_jones');

INSERT INTO posts (user_id, title, content) VALUES (1, 'My First Post', 'This is the content of my first post.');
INSERT INTO posts (user_id, title, content) VALUES (2, 'Another Post', 'A different post by another user.');
INSERT INTO posts (user_id, title) VALUES (1, 'Post without content');

INSERT INTO comments (post_id, user_id, content) VALUES (1, 2, 'Great post!');
INSERT INTO comments (post_id, user_id, content) VALUES (2, 1, 'Interesting thoughts.');

-- Demonstrating SQLite's UPSERT functionality (requires SQLite 3.24.0+)
INSERT INTO users (id, username, email) VALUES (1, 'john_doe', 'john.new@example.com')
ON CONFLICT(id) DO UPDATE SET email = excluded.email;

SELECT * FROM users;
SELECT * FROM posts;
SELECT * FROM comments;
SELECT * FROM user_post_counts;

PRAGMA integrity_check;