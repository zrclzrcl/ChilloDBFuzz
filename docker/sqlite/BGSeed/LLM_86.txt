DROP TABLE IF EXISTS employees;
CREATE TABLE employees (
    employee_id INTEGER PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20),
    hire_date DATE NOT NULL,
    job_id INTEGER,
    salary DECIMAL(10, 2),
    commission_pct DECIMAL(4, 2),
    manager_id INTEGER,
    department_id INTEGER
);

INSERT INTO employees (first_name, last_name, email, hire_date, job_id, salary, department_id) VALUES
('John', 'Doe', 'john.doe@example.com', '2022-01-15', 1, 60000.00, 10),
('Jane', 'Smith', 'jane.smith@example.com', '2022-02-28', 2, 75000.00, 20),
('Robert', 'Jones', 'robert.jones@example.com', '2022-03-10', 1, 62000.00, 10),
('Michael', 'Brown', 'michael.brown@example.com', '2022-04-01', 3, 80000.00, 20);

-- Test some SQLite specific features and edge cases
SELECT last_name, LENGTH(last_name) AS name_length FROM employees ORDER BY name_length DESC LIMIT 1;

SELECT first_name, salary FROM employees WHERE salary BETWEEN 60000 AND 70000 UNION ALL SELECT 'Total', SUM(salary) FROM employees;

SELECT employee_id, first_name FROM employees WHERE email LIKE '%.com' COLLATE NOCASE;

-- Create a VIEW and query it
DROP VIEW IF EXISTS employee_summary;
CREATE VIEW employee_summary AS
SELECT department_id, AVG(salary) AS avg_salary, COUNT(*) AS employee_count
FROM employees
GROUP BY department_id;

SELECT * FROM employee_summary;

-- Use a recursive CTE (Common Table Expression) for hierarchical data (self-referencing table)
DROP TABLE IF EXISTS managers;
CREATE TABLE managers (
    manager_id INTEGER PRIMARY KEY,
    manager_name TEXT,
    reports_to INTEGER,
    FOREIGN KEY (reports_to) REFERENCES managers(manager_id)
);

INSERT INTO managers (manager_id, manager_name, reports_to) VALUES
(1, 'Alice', NULL),
(2, 'Bob', 1),
(3, 'Charlie', 1),
(4, 'David', 2);

WITH RECURSIVE employee_hierarchy(manager_id, manager_name, level) AS (
    SELECT manager_id, manager_name, 0
    FROM managers
    WHERE reports_to IS NULL

    UNION ALL

    SELECT m.manager_id, m.manager_name, eh.level + 1
    FROM managers m
    JOIN employee_hierarchy eh ON m.reports_to = eh.manager_id
)
SELECT * FROM employee_hierarchy;

-- FTS5 example
DROP TABLE IF EXISTS documents;
CREATE VIRTUAL TABLE documents USING fts5(content);
INSERT INTO documents (content) VALUES ('SQLite is a powerful database.');
INSERT INTO documents (content) VALUES ('Fuzzing databases is important for security.');
SELECT * FROM documents WHERE documents MATCH 'database';