CREATE TABLE employees (
    employee_id INTEGER PRIMARY KEY,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    email TEXT UNIQUE,
    phone_number TEXT,
    hire_date DATE,
    job_id INTEGER,
    salary REAL,
    commission_pct REAL,
    manager_id INTEGER,
    department_id INTEGER
);

CREATE TABLE departments (
    department_id INTEGER PRIMARY KEY,
    department_name TEXT NOT NULL,
    manager_id INTEGER,
    location_id INTEGER
);

INSERT INTO employees (first_name, last_name, email, hire_date, salary, department_id) VALUES
('John', 'Doe', 'john.doe@example.com', '2022-01-15', 60000.00, 10),
('Jane', 'Smith', 'jane.smith@example.com', '2022-03-01', 75000.00, 20),
('Robert', 'Jones', 'robert.jones@example.com', '2022-05-10', 55000.00, 10);

INSERT INTO departments (department_name, location_id) VALUES
('Sales', 1),
('Marketing', 2);

SELECT first_name, last_name FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);

SELECT department_name FROM departments WHERE location_id IN (SELECT location_id FROM departments GROUP BY location_id HAVING COUNT(*) > 1);

SELECT employee_id, first_name, last_name FROM employees WHERE first_name LIKE 'J%' UNION ALL SELECT department_id, department_name, CAST(location_id AS TEXT) FROM departments WHERE department_name LIKE '%ing';

SELECT first_name, last_name FROM employees ORDER BY salary DESC LIMIT 2;

SELECT SUM(salary) OVER (ORDER BY hire_date) AS cumulative_salary FROM employees;

SELECT quote('This is a string with ''single quotes'' and "double quotes".');

SELECT changes();

PRAGMA table_info(employees);