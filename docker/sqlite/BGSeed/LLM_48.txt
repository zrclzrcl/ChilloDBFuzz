PRAGMA foreign_keys = ON;
CREATE TABLE products (
    product_id INTEGER PRIMARY KEY AUTOINCREMENT,
    product_name TEXT NOT NULL UNIQUE,
    price REAL CHECK (price > 0),
    description TEXT,
    category TEXT DEFAULT 'Uncategorized'
);

CREATE TABLE customers (
    customer_id INTEGER PRIMARY KEY AUTOINCREMENT,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    email TEXT UNIQUE,
    phone TEXT
);

CREATE TABLE orders (
    order_id INTEGER PRIMARY KEY AUTOINCREMENT,
    customer_id INTEGER,
    order_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    total_amount REAL,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

CREATE TABLE order_items (
    order_item_id INTEGER PRIMARY KEY AUTOINCREMENT,
    order_id INTEGER,
    product_id INTEGER,
    quantity INTEGER CHECK (quantity > 0),
    unit_price REAL,
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

CREATE VIEW high_value_customers AS
SELECT c.customer_id, c.first_name, c.last_name, SUM(o.total_amount) AS total_spent
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id
HAVING total_spent > 1000;

INSERT INTO products (product_name, price, description, category) VALUES
('Awesome Widget', 25.99, 'A truly awesome widget!', 'Widgets'),
('Deluxe Gadget', 99.50, 'The ultimate gadget for everyone.', 'Gadgets'),
('Simple Tool', 12.75, 'A simple tool for everyday tasks.', 'Tools');

INSERT INTO customers (first_name, last_name, email, phone) VALUES
('Alice', 'Smith', 'alice.smith@example.com', '555-1234'),
('Bob', 'Johnson', 'bob.johnson@example.com', '555-5678');

INSERT INTO orders (customer_id, total_amount) VALUES
(1, 51.98),
(2, 99.50),
(1, 12.75);

INSERT INTO order_items (order_id, product_id, quantity, unit_price) VALUES
(1, 1, 2, 25.99),
(2, 2, 1, 99.50),
(3, 3, 1, 12.75);

SELECT * FROM high_value_customers;
SELECT product_name FROM products WHERE price > (SELECT AVG(price) FROM products);
SELECT customer_id, COUNT(*) AS order_count FROM orders GROUP BY customer_id HAVING order_count > 1;
SELECT SUM(quantity * unit_price) FROM order_items;
SELECT description FROM products WHERE description LIKE '%awesome%';
SELECT first_name, last_name FROM customers WHERE email GLOB '*@example.com';

PRAGMA table_info(products);

CREATE TRIGGER update_total_amount
AFTER INSERT ON order_items
BEGIN
  UPDATE orders SET total_amount = (SELECT SUM(quantity * unit_price) FROM order_items WHERE order_id = NEW.order_id) WHERE order_id = NEW.order_id;
END;