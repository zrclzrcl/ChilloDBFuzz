CREATE TABLE employees (
    employee_id INTEGER PRIMARY KEY AUTOINCREMENT,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone_number VARCHAR(20),
    hire_date DATE NOT NULL,
    job_id INTEGER,
    salary DECIMAL(10, 2),
    commission_pct DECIMAL(4, 2),
    manager_id INTEGER,
    department_id INTEGER
);

CREATE TABLE departments (
    department_id INTEGER PRIMARY KEY AUTOINCREMENT,
    department_name VARCHAR(50) NOT NULL,
    manager_id INTEGER,
    location_id INTEGER
);

CREATE VIEW employee_details AS
SELECT
    e.employee_id,
    e.first_name,
    e.last_name,
    e.email,
    d.department_name,
    j.job_title,
    e.salary
FROM
    employees e
JOIN
    departments d ON e.department_id = d.department_id
JOIN
    jobs j ON e.job_id = j.job_id;

CREATE TRIGGER check_salary BEFORE INSERT ON employees
BEGIN
    SELECT CASE
        WHEN NEW.salary < 0 THEN
            RAISE(FAIL, 'Salary cannot be negative')
        END;
END;

INSERT INTO employees (first_name, last_name, email, hire_date, job_id, salary, department_id) VALUES
('John', 'Doe', 'john.doe@example.com', '2023-01-15', 1, 60000.00, 1);
INSERT INTO employees (first_name, last_name, email, hire_date, job_id, salary, department_id) VALUES
('Jane', 'Smith', 'jane.smith@example.com', '2023-02-20', 2, 75000.00, 2);

SELECT * FROM employee_details WHERE salary > 65000;

SELECT sql FROM sqlite_master WHERE type='table' AND name='employees';

CREATE TABLE products (
    product_id INTEGER PRIMARY KEY AUTOINCREMENT,
    product_name VARCHAR(255) NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    description TEXT
);

INSERT INTO products (product_name, price, description) VALUES ('Laptop', 1200.00, 'High-performance laptop');
INSERT INTO products (product_name, price, description) VALUES ('Mouse', 25.00, 'Wireless mouse');

SELECT * FROM products WHERE price BETWEEN 20 AND 1500;

PRAGMA integrity_check;

SELECT last_insert_rowid();