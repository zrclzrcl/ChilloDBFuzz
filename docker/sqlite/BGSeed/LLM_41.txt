BEGIN;
CREATE TABLE products (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT,
    price REAL NOT NULL,
    category TEXT
);

CREATE TABLE customers (
    id INTEGER PRIMARY KEY,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    email TEXT UNIQUE NOT NULL,
    phone TEXT
);

CREATE TABLE orders (
    id INTEGER PRIMARY KEY,
    customer_id INTEGER NOT NULL,
    order_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    total REAL,
    FOREIGN KEY (customer_id) REFERENCES customers(id)
);

CREATE TABLE order_items (
    id INTEGER PRIMARY KEY,
    order_id INTEGER NOT NULL,
    product_id INTEGER NOT NULL,
    quantity INTEGER NOT NULL,
    price REAL NOT NULL,
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);

CREATE INDEX idx_products_category ON products(category);
CREATE INDEX idx_orders_customer_id ON orders(customer_id);
CREATE INDEX idx_order_items_order_id ON order_items(order_id);

INSERT INTO products (name, description, price, category) VALUES
('Laptop', 'Powerful laptop for work and gaming', 1200.00, 'Electronics'),
('Mouse', 'Ergonomic wireless mouse', 25.00, 'Electronics'),
('T-Shirt', 'Cotton T-shirt', 15.00, 'Clothing'),
('Coffee Maker', 'Automatic coffee maker', 50.00, 'Appliances');

INSERT INTO customers (first_name, last_name, email, phone) VALUES
('John', 'Doe', 'john.doe@example.com', '555-1234'),
('Jane', 'Smith', 'jane.smith@example.com', '555-5678');

INSERT INTO orders (customer_id, total) VALUES
(1, 1225.00),
(2, 65.00);

INSERT INTO order_items (order_id, product_id, quantity, price) VALUES
(1, 1, 1, 1200.00),
(1, 2, 1, 25.00),
(2, 3, 1, 15.00),
(2, 4, 1, 50.00);

COMMIT;

SELECT * FROM products WHERE price > 50 ORDER BY price DESC LIMIT 2;
SELECT category, AVG(price) AS average_price FROM products GROUP BY category;
SELECT c.first_name, c.last_name, o.order_date, o.total FROM customers c JOIN orders o ON c.id = o.customer_id WHERE o.total > 50;
SELECT p.name, SUM(oi.quantity) AS total_quantity_sold FROM products p JOIN order_items oi ON p.id = oi.product_id GROUP BY p.name ORDER BY total_quantity_sold DESC;

-- SQLite-specific functions and features
SELECT last_insert_rowid(); -- Get the last inserted row ID
SELECT date('now'); -- Get current date
SELECT randomblob(10); -- Generate random blob data

-- Demonstrate integer overflow handling (specifically related to SQLite)
SELECT 9223372036854775807 + 1;

-- Example of using WITHOUT ROWID
CREATE TABLE example_without_rowid (
    x INTEGER,
    y TEXT,
    PRIMARY KEY (x, y)
) WITHOUT ROWID;

INSERT INTO example_without_rowid (x, y) VALUES (1, 'test');

SELECT * FROM example_without_rowid;

DROP TABLE IF EXISTS example_without_rowid; -- Cleanup after demonstrating WITHOUT ROWID