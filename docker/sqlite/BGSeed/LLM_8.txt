CREATE TABLE employees (
    employee_id INTEGER PRIMARY KEY AUTOINCREMENT,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    hire_date DATE,
    salary REAL,
    department_id INTEGER,
    FOREIGN KEY (department_id) REFERENCES departments(department_id)
);

CREATE TABLE departments (
    department_id INTEGER PRIMARY KEY AUTOINCREMENT,
    department_name TEXT NOT NULL,
    location TEXT
);

CREATE TABLE projects (
    project_id INTEGER PRIMARY KEY AUTOINCREMENT,
    project_name TEXT NOT NULL,
    start_date DATE,
    end_date DATE,
    budget REAL
);

CREATE TABLE employee_projects (
    employee_id INTEGER,
    project_id INTEGER,
    role TEXT,
    PRIMARY KEY (employee_id, project_id),
    FOREIGN KEY (employee_id) REFERENCES employees(employee_id),
    FOREIGN KEY (project_id) REFERENCES projects(project_id)
);

INSERT INTO departments (department_name, location) VALUES
('Sales', 'New York'),
('Marketing', 'London'),
('Engineering', 'San Francisco');

INSERT INTO employees (first_name, last_name, hire_date, salary, department_id) VALUES
('John', 'Doe', '2022-01-15', 60000.00, 1),
('Jane', 'Smith', '2023-03-10', 75000.00, 2),
('Peter', 'Jones', '2022-08-01', 90000.00, 3);

INSERT INTO projects (project_name, start_date, end_date, budget) VALUES
('Project Alpha', '2023-04-01', '2023-12-31', 500000.00),
('Project Beta', '2023-06-15', '2024-03-31', 750000.00);

INSERT INTO employee_projects (employee_id, project_id, role) VALUES
(1, 1, 'Sales Lead'),
(2, 2, 'Marketing Manager'),
(3, 1, 'Engineer');

CREATE VIEW EmployeeSummary AS
SELECT e.first_name, e.last_name, d.department_name, p.project_name
FROM employees e
JOIN departments d ON e.department_id = d.department_id
LEFT JOIN employee_projects ep ON e.employee_id = ep.employee_id
LEFT JOIN projects p ON ep.project_id = p.project_id;

CREATE INDEX idx_last_name ON employees(last_name);

PRAGMA journal_mode=WAL;
PRAGMA synchronous=NORMAL;

SELECT * FROM EmployeeSummary LIMIT 2;

-- Attempt to insert a duplicate primary key, testing error handling
INSERT INTO departments (department_id, department_name, location) VALUES (1, 'Another Department', 'Chicago');

-- Trigger creation that could be interesting
CREATE TRIGGER salary_update BEFORE UPDATE OF salary ON employees
BEGIN
    SELECT RAISE(FAIL, 'Salary cannot be updated directly');
END;

SELECT * FROM employees;

UPDATE employees SET salary = 100000 WHERE employee_id = 1; --This will FAIL since the trigger is in place.