PRAGMA foreign_keys = ON;
PRAGMA page_size = 4096;
PRAGMA cache_size = 10000;
PRAGMA journal_mode = WAL;

CREATE TABLE users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(100) NOT NULL,
    password VARCHAR(255) NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE posts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    title VARCHAR(255) NOT NULL,
    content TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE TABLE comments (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    post_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    comment TEXT NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(id),
    FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE INDEX idx_posts_user_id ON posts (user_id);
CREATE INDEX idx_comments_post_id ON comments (post_id);

INSERT INTO users (username, email, password) VALUES
('john_doe', 'john.doe@example.com', 'password123'),
('jane_doe', 'jane.doe@example.com', 'secure_password'),
('peter_pan', 'peter.pan@neverland.com', 'flyaway');

INSERT INTO posts (user_id, title, content) VALUES
(1, 'First Post', 'This is the first post by John.'),
(2, 'Jane\'s Thoughts', 'Some deep thoughts by Jane.'),
(1, 'Another Post', 'John writes again.');

INSERT INTO comments (post_id, user_id, comment) VALUES
(1, 2, 'Great post John!'),
(1, 3, 'I agree!'),
(2, 1, 'Interesting perspective.');

-- Trigger to prevent deletion of users with posts
CREATE TRIGGER prevent_user_deletion
BEFORE DELETE ON users
FOR EACH ROW
WHEN EXISTS (SELECT 1 FROM posts WHERE user_id = OLD.id)
BEGIN
    SELECT RAISE(ABORT, 'Cannot delete user with associated posts.');
END;

-- View to get post counts for each user
CREATE VIEW user_post_counts AS
SELECT u.id AS user_id, u.username, COUNT(p.id) AS post_count
FROM users u
LEFT JOIN posts p ON u.id = p.user_id
GROUP BY u.id, u.username;

SELECT * FROM user_post_counts;

-- Try some unusual operations:
SELECT LENGTH(content), SUBSTR(content, 5, 10) FROM posts;
SELECT DATE(created_at), TIME(created_at) FROM users;

-- Create a table with unusual column types
CREATE TABLE weird_data (
    id INTEGER PRIMARY KEY,
    some_text TEXT COLLATE NOCASE,
    some_real REAL,
    some_int INTEGER,
    some_blob BLOB
);

INSERT INTO weird_data (some_text, some_real, some_int, some_blob) VALUES
('Mixed Case Text', 3.14159, 42, zeroblob(20));

SELECT hex(some_blob) FROM weird_data;

--FTS5 Table for posts
CREATE VIRTUAL TABLE posts_fts USING fts5(title, content, content='posts', content_rowid='id');

INSERT INTO posts_fts(rowid, title, content) SELECT id, title, content FROM posts;

CREATE TRIGGER posts_after_insert AFTER INSERT ON posts BEGIN
  INSERT INTO posts_fts(rowid, title, content) VALUES (new.id, new.title, new.content);
END;

CREATE TRIGGER posts_after_delete AFTER DELETE ON posts BEGIN
  INSERT INTO posts_fts(posts_fts, rowid, title, content) VALUES('delete', old.id, old.title, old.content);
END;

CREATE TRIGGER posts_after_update AFTER UPDATE ON posts BEGIN
  INSERT INTO posts_fts(posts_fts, rowid, title, content) VALUES('delete', old.id, old.title, old.content);
  INSERT INTO posts_fts(rowid, title, content) VALUES (new.id, new.title, new.content);
END;

SELECT * FROM posts_fts WHERE posts_fts MATCH 'John';

--JSON1 usage
SELECT json('{ "a": 1, "b": [2, 3, 4], "c": { "d": "hello" } }');
SELECT json_extract('{ "a": 1, "b": [2, 3, 4], "c": { "d": "hello" } }', '$.c.d');