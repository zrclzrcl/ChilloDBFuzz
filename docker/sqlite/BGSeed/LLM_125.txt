CREATE TABLE employees (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name VARCHAR(255) NOT NULL,
  department VARCHAR(255),
  salary DECIMAL(10, 2),
  hire_date DATE
);

CREATE TABLE departments (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name VARCHAR(255) NOT NULL,
  location VARCHAR(255)
);

CREATE TABLE projects (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name VARCHAR(255) NOT NULL,
  start_date DATE,
  end_date DATE,
  budget DECIMAL(12, 2)
);

CREATE TABLE employee_projects (
  employee_id INTEGER,
  project_id INTEGER,
  role VARCHAR(255),
  PRIMARY KEY (employee_id, project_id),
  FOREIGN KEY (employee_id) REFERENCES employees(id),
  FOREIGN KEY (project_id) REFERENCES projects(id)
);

INSERT INTO departments (name, location) VALUES ('Sales', 'New York');
INSERT INTO departments (name, location) VALUES ('Engineering', 'San Francisco');
INSERT INTO departments (name, location) VALUES ('Marketing', 'London');

INSERT INTO employees (name, department, salary, hire_date) VALUES ('Alice Smith', 'Sales', 60000.00, '2022-01-15');
INSERT INTO employees (name, department, salary, hire_date) VALUES ('Bob Johnson', 'Engineering', 80000.00, '2021-07-20');
INSERT INTO employees (name, department, salary, hire_date) VALUES ('Charlie Brown', 'Marketing', 55000.00, '2023-03-10');
INSERT INTO employees (name, department, salary, hire_date) VALUES ('David Lee', 'Sales', 65000.00, '2022-05-01');
INSERT INTO employees (name, department, salary, hire_date) VALUES ('Eve Wilson', 'Engineering', 90000.00, '2020-11-05');

INSERT INTO projects (name, start_date, end_date, budget) VALUES ('Project Alpha', '2023-01-01', '2023-12-31', 500000.00);
INSERT INTO projects (name, start_date, end_date, budget) VALUES ('Project Beta', '2023-04-01', '2024-03-31', 750000.00);

INSERT INTO employee_projects (employee_id, project_id, role) VALUES (1, 1, 'Sales Lead');
INSERT INTO employee_projects (employee_id, project_id, role) VALUES (2, 2, 'Software Engineer');
INSERT INTO employee_projects (employee_id, project_id, role) VALUES (3, 1, 'Marketing Analyst');
INSERT INTO employee_projects (employee_id, project_id, role) VALUES (4, 2, 'Sales Representative');
INSERT INTO employee_projects (employee_id, project_id, role) VALUES (5, 2, 'Senior Engineer');

-- Demonstrate window functions, common table expressions, and conditional aggregation
SELECT
    department,
    AVG(salary) OVER (PARTITION BY department) AS avg_department_salary,
    SUM(CASE WHEN hire_date > '2022-01-01' THEN 1 ELSE 0 END) OVER (PARTITION BY department) AS new_hires
FROM employees;


WITH
  DepartmentSalary AS (
    SELECT
      department,
      AVG(salary) AS avg_salary
    FROM
      employees
    GROUP BY
      department
  ),
  RecentProjects AS (
    SELECT
      id,
      name
    FROM
      projects
    WHERE
      start_date > date('now', '-1 year')
  )
SELECT
  e.name,
  e.salary,
  ds.avg_salary,
  rp.name AS project_name
FROM
  employees AS e
  JOIN DepartmentSalary AS ds ON e.department = ds.department
  LEFT JOIN employee_projects AS ep ON e.id = ep.employee_id
  LEFT JOIN RecentProjects AS rp ON ep.project_id = rp.id
WHERE e.salary > ds.avg_salary
ORDER BY e.salary DESC;

-- Example using pragma and FTS5 for full-text search (unique to SQLite)
PRAGMA case_sensitive_like = TRUE;

CREATE VIRTUAL TABLE employee_fts USING fts5(name, department, salary);
INSERT INTO employee_fts SELECT name, department, salary FROM employees;

SELECT * FROM employee_fts WHERE employee_fts MATCH 'Engineer';