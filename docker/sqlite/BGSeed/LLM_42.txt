PRAGMA foreign_keys = ON;
PRAGMA journal_mode = WAL;
CREATE TABLE users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username VARCHAR(255) UNIQUE NOT NULL,
    email VARCHAR(255),
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE posts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    title VARCHAR(255) NOT NULL,
    content TEXT,
    published BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE TABLE comments (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    post_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    comment TEXT NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(id),
    FOREIGN KEY (user_id) REFERENCES users(id)
);

INSERT INTO users (username, email) VALUES ('testuser1', 'test1@example.com');
INSERT INTO users (username, email) VALUES ('testuser2', 'test2@example.com');
INSERT INTO users (username, email) VALUES ('testuser3', 'test3@example.com');

INSERT INTO posts (user_id, title, content, published) VALUES (1, 'First Post', 'This is the first post.', TRUE);
INSERT INTO posts (user_id, title, content, published) VALUES (2, 'Second Post', 'This is the second post.', FALSE);
INSERT INTO posts (user_id, title, content, published) VALUES (1, 'Third Post', 'This is the third post.', TRUE);

INSERT INTO comments (post_id, user_id, comment) VALUES (1, 2, 'Great post!');
INSERT INTO comments (post_id, user_id, comment) VALUES (1, 3, 'Thanks for sharing.');
INSERT INTO comments (post_id, user_id, comment) VALUES (2, 1, 'Interesting.');

CREATE VIEW active_posts AS SELECT * FROM posts WHERE published = TRUE;

CREATE TRIGGER update_username BEFORE UPDATE ON users BEGIN SELECT RAISE(FAIL, 'Username cannot be changed'); END;

SELECT * FROM users;
SELECT * FROM posts;
SELECT * FROM comments;
SELECT * FROM active_posts;
SELECT sql FROM sqlite_master WHERE type='trigger';

SELECT DISTINCT user_id FROM posts;

-- Test some edge cases
INSERT INTO users (username, email) VALUES (NULL, 'null_username@example.com');
INSERT INTO posts (user_id, title, content) VALUES (999, 'Orphaned Post', 'This post refers to non-existent user.'); -- Orphaned post