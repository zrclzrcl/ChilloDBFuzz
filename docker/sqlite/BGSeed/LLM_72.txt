BEGIN;

-- Create a table for customers
CREATE TABLE Customers (
    CustomerID INTEGER PRIMARY KEY AUTOINCREMENT,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50) NOT NULL,
    Email VARCHAR(100) UNIQUE,
    Phone VARCHAR(20),
    City VARCHAR(50),
    Country VARCHAR(50) DEFAULT 'USA',
    RegistrationDate DATETIME DEFAULT (strftime('%Y-%m-%d %H:%M:%S', 'now'))
);

-- Create a table for orders
CREATE TABLE Orders (
    OrderID INTEGER PRIMARY KEY AUTOINCREMENT,
    CustomerID INTEGER NOT NULL,
    OrderDate DATETIME DEFAULT (strftime('%Y-%m-%d %H:%M:%S', 'now')),
    TotalAmount DECIMAL(10, 2) NOT NULL,
    Status VARCHAR(20) CHECK (Status IN ('Pending', 'Shipped', 'Delivered', 'Cancelled')),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

-- Create a table for products
CREATE TABLE Products (
    ProductID INTEGER PRIMARY KEY AUTOINCREMENT,
    ProductName VARCHAR(100) NOT NULL,
    Description TEXT,
    Price DECIMAL(10, 2) NOT NULL,
    StockQuantity INTEGER NOT NULL DEFAULT 0,
    Category VARCHAR(50)
);

-- Create a table for order items (many-to-many relationship between Orders and Products)
CREATE TABLE OrderItems (
    OrderItemID INTEGER PRIMARY KEY AUTOINCREMENT,
    OrderID INTEGER NOT NULL,
    ProductID INTEGER NOT NULL,
    Quantity INTEGER NOT NULL,
    UnitPrice DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);

-- Insert some sample data into Customers
INSERT INTO Customers (FirstName, LastName, Email, Phone, City, Country) VALUES
('John', 'Doe', 'john.doe@example.com', '555-123-4567', 'New York', 'USA'),
('Jane', 'Smith', 'jane.smith@example.com', '555-987-6543', 'Los Angeles', 'USA'),
('David', 'Lee', 'david.lee@example.com', '555-555-5555', 'Chicago', 'Canada'),
('Emily', 'Brown', 'emily.brown@example.com', '555-111-2222', 'Houston', 'UK');

-- Insert some sample data into Orders
INSERT INTO Orders (CustomerID, TotalAmount, Status) VALUES
(1, 150.00, 'Shipped'),
(2, 75.50, 'Pending'),
(3, 200.00, 'Delivered'),
(4, 50.00, 'Cancelled');

-- Insert some sample data into Products
INSERT INTO Products (ProductName, Description, Price, StockQuantity, Category) VALUES
('Laptop', 'High-performance laptop', 1200.00, 10, 'Electronics'),
('Mouse', 'Wireless mouse', 25.00, 50, 'Electronics'),
('Keyboard', 'Mechanical keyboard', 75.00, 30, 'Electronics'),
('T-shirt', 'Cotton T-shirt', 20.00, 100, 'Clothing');

-- Insert some sample data into OrderItems
INSERT INTO OrderItems (OrderID, ProductID, Quantity, UnitPrice) VALUES
(1, 1, 1, 1200.00),
(1, 2, 2, 25.00),
(2, 3, 1, 75.00),
(3, 1, 1, 1200.00),
(3, 4, 4, 20.00),
(4, 4, 1, 20.00);

-- SQLite-Specific: Try an UPSERT command (INSERT OR REPLACE), which handles updates if a conflict exists.
INSERT INTO Customers (CustomerID, FirstName, LastName, Email) VALUES (1, 'John', 'DoeUpdated', 'john.doe@example.com')
ON CONFLICT(Email) DO UPDATE SET FirstName='John', LastName='DoeUpdated';


-- Query: Find all customers who have placed orders with a total amount greater than $100
SELECT c.FirstName, c.LastName, SUM(o.TotalAmount) AS TotalSpent
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
GROUP BY c.CustomerID
HAVING SUM(o.TotalAmount) > 100
ORDER BY TotalSpent DESC;

-- Test different data types and constraints.
INSERT INTO Customers (FirstName, LastName, Email, Phone, City, Country) VALUES ('VeryLongFirstNameHereToTestLimits', 'LastName', 'long.email.to.trigger.errors@example.com', '555-123-4567', 'New York', 'USA');

-- Add an index
CREATE INDEX idx_customers_lastname ON Customers(LastName);

-- Alter the table to add a column
ALTER TABLE Customers ADD COLUMN Notes TEXT;

-- Update a row with the new column
UPDATE Customers SET Notes = 'Added some notes here' WHERE CustomerID = 1;

COMMIT;