BEGIN;

-- Create tables with various data types and constraints.
CREATE TABLE employees (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    hire_date DATE,
    salary REAL,
    department_id INTEGER,
    FOREIGN KEY (department_id) REFERENCES departments(id)
);

CREATE TABLE departments (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name VARCHAR(50) UNIQUE NOT NULL,
    location VARCHAR(100)
);

CREATE TABLE projects (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name VARCHAR(100) NOT NULL,
    start_date DATE,
    end_date DATE
);

CREATE TABLE employee_projects (
    employee_id INTEGER,
    project_id INTEGER,
    PRIMARY KEY (employee_id, project_id),
    FOREIGN KEY (employee_id) REFERENCES employees(id),
    FOREIGN KEY (project_id) REFERENCES projects(id)
);

-- Insert some initial data.
INSERT INTO departments (name, location) VALUES
('Sales', 'New York'),
('Marketing', 'London'),
('Engineering', 'San Francisco');

INSERT INTO employees (first_name, last_name, hire_date, salary, department_id) VALUES
('Alice', 'Smith', '2020-01-15', 60000.00, 1),
('Bob', 'Johnson', '2021-05-20', 75000.00, 2),
('Charlie', 'Brown', '2022-03-10', 90000.00, 3);

INSERT INTO projects (name, start_date, end_date) VALUES
('Project Alpha', '2023-01-01', '2023-12-31'),
('Project Beta', '2023-06-01', '2024-05-31');

INSERT INTO employee_projects (employee_id, project_id) VALUES
(1, 1),
(2, 2),
(3, 1),
(3,2);

-- Demonstrate SQLite-specific features: WITHOUT ROWID tables and virtual tables.
CREATE VIRTUAL TABLE fts_example USING fts5(content);
INSERT INTO fts_example (content) VALUES ('This is a test.');
INSERT INTO fts_example (content) VALUES ('Another example sentence.');

CREATE TABLE data (a INTEGER, b TEXT) WITHOUT ROWID;
INSERT INTO data (a, b) VALUES (1, 'test1'), (2, 'test2');

-- Queries demonstrating joins, aggregations, subqueries, and window functions.
SELECT e.first_name, e.last_name, d.name AS department_name
FROM employees e
JOIN departments d ON e.department_id = d.id
WHERE e.salary > 70000;

SELECT department_id, AVG(salary) AS average_salary
FROM employees
GROUP BY department_id;

SELECT first_name, last_name, salary,
       RANK() OVER (ORDER BY salary DESC) AS salary_rank
FROM employees;

SELECT * FROM (SELECT 1 as a, 2 as b) CROSS JOIN (SELECT 3 as c, 4 as d);

-- Attempt an UPSERT using ON CONFLICT (Requires SQLite 3.24.0 or later.)
INSERT INTO departments (id, name, location) VALUES (4, 'HR', 'Chicago')
ON CONFLICT(name) DO UPDATE SET location = excluded.location;

-- VACUUM to optimize the database file
VACUUM;

-- PRAGMA statements to check database configuration and integrity.
PRAGMA integrity_check;
PRAGMA foreign_key_check;

-- Queries that utilize various operators and functions
SELECT id, first_name, salary FROM employees WHERE salary BETWEEN 50000 AND 80000 AND first_name LIKE 'A%';
SELECT LENGTH(name), UPPER(name) FROM departments;

-- Queries for virtual table
SELECT * FROM fts_example WHERE fts_example MATCH 'test';

-- ATTACH and DETACH databases. Not functional here without a separate database, but good to include the syntax
-- ATTACH DATABASE 'another.db' AS other_db;
-- SELECT * FROM other_db.some_table;
-- DETACH DATABASE other_db;

COMMIT;