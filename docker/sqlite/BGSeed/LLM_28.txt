CREATE TABLE users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT UNIQUE NOT NULL,
    email TEXT,
    password TEXT NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE posts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    title TEXT NOT NULL,
    content TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE INDEX idx_posts_user_id ON posts(user_id);

CREATE VIEW active_users AS
SELECT id, username, email FROM users WHERE created_at > date('now', '-1 year');

CREATE TRIGGER update_username BEFORE UPDATE ON users
BEGIN
    SELECT CASE
        WHEN NEW.username = OLD.username THEN
            RAISE(IGNORE)
        WHEN (SELECT COUNT(*) FROM users WHERE username = NEW.username) > 0 THEN
            RAISE(FAIL, 'Username already exists')
        END;
END;

INSERT INTO users (username, email, password) VALUES ('testuser1', 'test1@example.com', 'password123');
INSERT INTO users (username, email, password) VALUES ('testuser2', 'test2@example.com', 'securepass');

INSERT INTO posts (user_id, title, content) VALUES (1, 'My First Post', 'This is my first post content.');
INSERT INTO posts (user_id, title, content) VALUES (2, 'Another Post', 'Content for another user''s post.');

SELECT * FROM users WHERE id = 1;
SELECT * FROM posts WHERE user_id = 1;

UPDATE users SET email = 'newemail@example.com' WHERE id = 1;

DELETE FROM posts WHERE id = 2;

ALTER TABLE users ADD COLUMN is_active BOOLEAN DEFAULT 1;

CREATE VIRTUAL TABLE fts_posts USING fts5(title, content, user_id, tokenize = 'porter');
INSERT INTO fts_posts (rowid, title, content, user_id) SELECT id, title, content, user_id FROM posts;
CREATE TRIGGER posts_ai AFTER INSERT ON posts BEGIN
  INSERT INTO fts_posts (rowid, title, content, user_id) VALUES (new.id, new.title, new.content, new.user_id);
END;
CREATE TRIGGER posts_ad AFTER DELETE ON posts BEGIN
  INSERT INTO fts_posts (fts_posts, rowid, title, content, user_id) VALUES('delete', old.id, old.title, old.content, old.user_id);
END;
CREATE TRIGGER posts_au AFTER UPDATE ON posts BEGIN
  INSERT INTO fts_posts (fts_posts, rowid, title, content, user_id) VALUES('delete', old.id, old.title, old.content, old.user_id);
  INSERT INTO fts_posts (rowid, title, content, user_id) VALUES (new.id, new.title, new.content, new.user_id);
END;

SELECT * FROM fts_posts WHERE fts_posts MATCH 'post';