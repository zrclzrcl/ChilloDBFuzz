CREATE TABLE employees (
    employee_id INTEGER PRIMARY KEY AUTOINCREMENT,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    hire_date DATE NOT NULL,
    salary REAL NOT NULL,
    department_id INTEGER,
    FOREIGN KEY (department_id) REFERENCES departments(department_id)
);

CREATE TABLE departments (
    department_id INTEGER PRIMARY KEY AUTOINCREMENT,
    department_name TEXT NOT NULL,
    location_id INTEGER,
    FOREIGN KEY (location_id) REFERENCES locations(location_id)
);

CREATE TABLE locations (
    location_id INTEGER PRIMARY KEY AUTOINCREMENT,
    address TEXT,
    city TEXT,
    state TEXT,
    zip_code TEXT
);

INSERT INTO locations (address, city, state, zip_code) VALUES
('123 Main St', 'Anytown', 'CA', '91234'),
('456 Oak Ave', 'Springfield', 'IL', '62704'),
('789 Pine Ln', 'Hill Valley', 'CA', '90210');

INSERT INTO departments (department_name, location_id) VALUES
('Sales', 1),
('Marketing', 2),
('Engineering', 3);

INSERT INTO employees (first_name, last_name, hire_date, salary, department_id) VALUES
('John', 'Doe', '2022-01-15', 60000.00, 1),
('Jane', 'Smith', '2022-03-01', 75000.00, 2),
('Robert', 'Jones', '2022-05-20', 90000.00, 3),
('Alice', 'Brown', '2023-02-10', 65000.00, 1);

CREATE VIEW employee_details AS
SELECT
    e.first_name,
    e.last_name,
    e.salary,
    d.department_name,
    l.city AS location
FROM
    employees e
JOIN
    departments d ON e.department_id = d.department_id
JOIN
    locations l ON d.location_id = l.location_id;

SELECT * FROM employee_details WHERE salary > 70000;

SELECT department_name, AVG(salary) AS avg_salary
FROM employee_details
GROUP BY department_name
ORDER BY avg_salary DESC;

SELECT first_name, last_name FROM employees WHERE hire_date BETWEEN '2022-01-01' AND '2022-12-31';

-- Example using a common table expression (CTE)
WITH HighSalaryEmployees AS (
    SELECT employee_id, first_name, last_name, salary
    FROM employees
    WHERE salary > 70000
)
SELECT first_name, last_name
FROM HighSalaryEmployees
ORDER BY salary DESC;

-- Example using window functions (SQLite 3.25+)
SELECT
    first_name,
    last_name,
    salary,
    RANK() OVER (ORDER BY salary DESC) AS salary_rank
FROM
    employees;

PRAGMA table_info(employees);

SELECT last_name FROM employees ORDER BY RANDOM() LIMIT 1;

-- Testing json support
CREATE TABLE json_test (
  id INTEGER PRIMARY KEY,
  data JSON
);

INSERT INTO json_test (data) VALUES ('{"name": "John Doe", "age": 30, "city": "New York"}');
INSERT INTO json_test (data) VALUES ('{"product": "Laptop", "price": 1200, "in_stock": true}');

SELECT json_extract(data, '$.name') FROM json_test WHERE json_valid(data);
SELECT json_extract(data, '$.price') FROM json_test WHERE json_typeof(data) = 'object' AND json_extract(data, '$.price') > 1000;