CREATE TABLE employees (
    id INTEGER PRIMARY KEY,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    hire_date DATE,
    salary REAL,
    department_id INTEGER
);

CREATE TABLE departments (
    id INTEGER PRIMARY KEY,
    name TEXT NOT NULL,
    location TEXT
);

CREATE INDEX idx_last_name ON employees(last_name);
CREATE INDEX idx_department_id ON employees(department_id);

INSERT INTO departments (name, location) VALUES ('Sales', 'New York');
INSERT INTO departments (name, location) VALUES ('Marketing', 'London');
INSERT INTO departments (name, location) VALUES ('Engineering', 'San Francisco');

INSERT INTO employees (first_name, last_name, hire_date, salary, department_id) VALUES ('John', 'Doe', '2022-01-15', 60000.00, 1);
INSERT INTO employees (first_name, last_name, hire_date, salary, department_id) VALUES ('Jane', 'Smith', '2023-05-20', 75000.00, 2);
INSERT INTO employees (first_name, last_name, hire_date, salary, department_id) VALUES ('Robert', 'Jones', '2022-11-01', 90000.00, 3);
INSERT INTO employees (first_name, last_name, hire_date, salary, department_id) VALUES ('Alice', 'Brown', '2024-02-10', 80000.00, 1);

ANALYZE sqlite_master;

SELECT * FROM employees WHERE salary > 70000 ORDER BY last_name;
SELECT e.first_name, e.last_name, d.name AS department_name FROM employees e JOIN departments d ON e.department_id = d.id WHERE d.location = 'New York';
SELECT AVG(salary) FROM employees;
SELECT COUNT(*) FROM employees WHERE hire_date < '2023-01-01';
SELECT department_id, MAX(salary) FROM employees GROUP BY department_id;

-- Demonstrating SQLite specific features:
CREATE TABLE json_test (data JSON);
INSERT INTO json_test (data) VALUES ('{"name": "Charlie", "age": 30, "city": "Paris"}');
SELECT json_extract(data, '$.name') FROM json_test;
SELECT * FROM employees WHERE salary BETWEEN 50000 AND 80000;

SELECT * FROM employees LIMIT 2 OFFSET 1;

PRAGMA integrity_check;