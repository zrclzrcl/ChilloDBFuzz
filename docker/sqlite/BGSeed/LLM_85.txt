DROP TABLE IF EXISTS products;
CREATE TABLE products (
    product_id INTEGER PRIMARY KEY,
    product_name TEXT NOT NULL,
    description TEXT,
    price REAL NOT NULL CHECK (price > 0),
    category TEXT,
    inventory INTEGER NOT NULL DEFAULT 0,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (product_name)
);

INSERT INTO products (product_name, description, price, category, inventory) VALUES
('Awesome Widget', 'A truly awesome widget for all your widgeting needs.', 19.99, 'Widgets', 100),
('Super Gadget', 'The ultimate gadget to solve all your problems.', 49.99, 'Gadgets', 50),
('Deluxe Thingamajig', 'A deluxe thingamajig that will make your life easier.', 99.99, 'Thingamajigs', 25),
('Basic Whatnot', 'A basic whatnot for everyday use.', 9.99, 'Whatnots', 200),
('Mega Doohickey', 'The biggest and best doohickey you can find.', 79.99, 'Doohickeys', 10);

DROP TABLE IF EXISTS orders;
CREATE TABLE orders (
    order_id INTEGER PRIMARY KEY,
    customer_name TEXT NOT NULL,
    order_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    total_amount REAL
);

DROP TABLE IF EXISTS order_items;
CREATE TABLE order_items (
    order_item_id INTEGER PRIMARY KEY,
    order_id INTEGER,
    product_id INTEGER,
    quantity INTEGER NOT NULL,
    price REAL NOT NULL,
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

INSERT INTO orders (customer_name, total_amount) VALUES
('Alice Smith', 149.97),
('Bob Johnson', 99.98),
('Charlie Brown', 299.97);

INSERT INTO order_items (order_id, product_id, quantity, price) VALUES
(1, 1, 3, 19.99),
(1, 2, 2, 49.99),
(2, 3, 1, 99.99),
(2, 4, 1, 9.99),
(3, 3, 3, 99.99);

-- Test edge cases: large quantities, zero price (should fail), null description
INSERT INTO products (product_name, price, category, inventory, description) VALUES
('Extreme Gizmo', 999.99, 'Gizmos', 1, NULL);

-- Demonstrate REPLACE INTO - can be used for upserts
REPLACE INTO products (product_id, product_name, description, price, category, inventory) VALUES (1, 'Awesome Widget', 'Updated description', 24.99, 'Widgets', 110);

-- SQLite-specific function: last_insert_rowid()
SELECT last_insert_rowid();

-- Vacuum the database to test database maintenance
VACUUM;

-- Test aggregate functions and grouping
SELECT category, AVG(price) AS average_price, SUM(inventory) AS total_inventory FROM products GROUP BY category ORDER BY average_price DESC;

-- Test subqueries and correlated subqueries
SELECT product_name, price FROM products WHERE price > (SELECT AVG(price) FROM products);

-- Test string manipulation functions
SELECT product_name, UPPER(category) AS uppercase_category FROM products WHERE product_name LIKE '%Widget%';

-- Test date and time functions
SELECT order_date, STRFTIME('%Y-%m-%d', order_date) AS formatted_date FROM orders;

-- Test transactions. Create and rollback.
BEGIN TRANSACTION;
INSERT INTO products (product_name, description, price, category, inventory) VALUES ('Temporary Product', '...', 5.0, 'Temp', 1);
ROLLBACK;

-- Test attach database functionality.
ATTACH DATABASE 'temp.db' AS temp_db;
CREATE TABLE temp_db.temp_table (id INTEGER PRIMARY KEY, value TEXT);
INSERT INTO temp_db.temp_table (value) VALUES ('Hello from attached db');
SELECT * FROM temp_db.temp_table;
DETACH DATABASE temp_db;

-- Test pragma statements
PRAGMA table_info(products);
PRAGMA index_list(products);